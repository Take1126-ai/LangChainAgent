from langchain_core.tools import tool

@tool(parse_docstring=True)
def think_tool(reflection: str) -> str:
    """
    <think_toolの概要>
    作業の進捗、意思決定、および最終回答の品質を戦略的に振り返り、自己評価するためのツール。

    各思考サイクルやツール出力を得た後、または最終回答を生成する前にこのツールを使用し、結果を分析して次のステップを体系的に計画し、回答の品質を評価する。
    これにより、作業の中に意図的な「間」を作り、質の高い意思決定と正確な回答を行えるようにする。
    自己評価の結果、問題が見つかった場合は、回答を修正する。
    </think_toolの概要>

    <使用するタイミング>
    - ツール出力を得た後: どんな重要な情報を見つけたか？
    - 次のステップを決める前: 包括的に答えるのに十分か？
    - 作業・分析・問題解決の不足を評価するとき: まだ欠けている具体的な情報は何か？
    - 作業・分析・問題解決を締めくくる前: 今、完全な答えを提供できるか？
    - 問題の複雑さを考えるとき: 検索回数の制限に達しているか？
    - 最終回答をユーザーに提示する前: 回答の品質を自己評価する。
    </使用するタイミング>

    <振り返りで扱うべき内容>
    - 現在の発見の分析 - どんな具体的な情報を集めたか？
    - ギャップの評価 - まだ欠けている重要な情報は何か？
    - 質の評価 - 良い答えを出すのに十分な証拠や例があるか？
    - 戦略的判断 - さらに検索を続けるべきか、それとも答えを提示すべきか？
    </振り返りで扱うべき内容>

    <自己評価の評価観点>
    - 回答はユーザーの元の要求に正確に応えているか？
    - 回答に含まれる情報は、利用可能なツール（特にインターネット検索やファイル読み込み）の実行結果に基づいているか？
    - ハルシネーション（事実に基づかない情報の生成）の可能性はないか？
    - 不正確な情報や誤解を招く表現を含んでいないか？
    - 回答は明確で、簡潔にまとめられているか？
    </自己評価の評価観点>
    
    Args:
        reflection: 作業の進捗、発見、ギャップ、次のステップについての詳細な振り返り

    Returns:
        意思決定のために振り返りが記録されたことの確認
    """
    return f"Reflection recorded: {reflection}"
